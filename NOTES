SELECT column1, column2, ...
FROM table_name;

SELECT COUNT(DISTINCT Country) FROM Customers;

SELECT * FROM Customers
WHERE Country='Mexico';

The ORDER BY keyword sorts the records in ascending order by default

For string values the ORDER BY keyword will order alphabetically:

SELECT IFNULL(NULL, 500);
if this statement is NULL then 500 is printed

ORDER BY Several Columns

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:


SELECT * FROM Customers
WHERE Country = 'Spain' AND(CustomerName LIKE 'G%' ORCustomerName LIKE 'R%');

SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'A%';

SELECT * FROM Customers
WHERE CustomerID NOT BETWEEN 10 AND. 60;


SELECT * FROM Customers
WHERE NOT CustomerID > 50;


SELECT SUM(Quantity * 10)
FROM OrderDetails; 

Return all customers starting with either "b", "s", or "p":
SELECT * FROM Customers
WHERE CustomerName LIKE '[bsp]%';

Return all customers starting with "a", "b", "c", "d", "e" or "f":
SELECT * FROM Customers
WHERE CustomerName LIKE '[a-f]%';

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

The BETWEEN operator is inclusive: begin and end values are included. 

SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01'AND '1996-07-31';

SELECT ProductName AS [My Great Products]
FROM Products; 

Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ONOrders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

SELECT w1.id
FROM Weather w1, Weather w2
WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;

select stu.student_id,stu.student_name,sub.subject_name from Students as stu,Subjects as sub,Examinations as e group by student_name,sub.subject_name order by student_id,sub.subject_name;

select s.user_id,ROUND(AVG(IF(action="confirmed",1,0)),2) AS confirmation_rate  from Signups as s LEFT OUTER JOIN Confirmations as c ON s.user_id=c.user_id group by s.user_id;


select p.product_id,IF(ROUND(SUM(price*units)/SUM(units),2) IS NULL,0,ROUND(SUM(price*units)/SUM(units),2)) as average_price from Prices as p LEFT OUTER JOIN UnitsSold as u ON p.product_id=u.product_id and u.purchase_date between p.start_date and p.end_date group by p.product_id; 


select SUBSTR(trans_date,1,7) as month,country,count(*) as trans_count ,sum(IF(state="approved",1,0)) as approved_count ,SUM(amount) as trans_total_amount  ,SUM(IF(state="approved",amount,0)) as approved_total_amount from Transactions as t group by country,month;


Select round(avg(order_date = customer_pref_delivery_date)*100, 2) as immediate_percentage
from Delivery
where (customer_id, order_date) in (
  Select customer_id, min(order_date) 
  from Delivery
  group by customer_id
);


-- this basically creates a new table named as cte and return column names as num,num1,hel
with cte (num,num1,hel) as (
    select num,
    lead(num,1) over(),
    lead(num,2) over()
    from logs

)
select distinct num as ConsecutiveNums from cte where num=num1 and num=hel;



SELECT 
    sector,
    SUM(
        CASE 
            WHEN turnover LIKE '%B' THEN CAST(REPLACE(REPLACE(turnover, '$', ''), 'B', '') AS FLOAT) * 1000000000
            WHEN turnover LIKE '%M' THEN CAST(REPLACE(REPLACE(turnover, '$', ''), 'M', '') AS FLOAT) * 1000000
            ELSE 0
        END
    ) AS total_turnover
FROM companies
GROUP BY sector;



with cte as(
#get table of sum of weights until that person. make sure to order by tur
    select person_name,sum(weight) over(order by turn)  as tw
    from Queue  
    -- window function
),
below as (
    select row_number() over() as id,person_name,tw from cte where tw<=1000 order by tw desc
)
select person_name from below where id=1;


